import React, { useEffect, useState } from "react";
import { Button, Divider, Spin, Rate, Input, List, message, Modal } from "antd"; // üü¢ Th√™m Modal ·ªü ƒë√¢y
import BookCard from "../../components/BookCard";
import { useLocation, useNavigate } from "react-router-dom";
import { searchBooks } from "../../api/books";
import {
  getRatingsForBook,
  getAverageRating,
  submitRating,
} from "../../api/ratings";

const { TextArea } = Input;

const BookDetails = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const bookDetail = location.state?.book;

  const [suggestedBooks, setSuggestedBooks] = useState([]);
  const [loading, setLoading] = useState(false);

  // ‚≠ê Qu·∫£n l√Ω rating
  const [ratings, setRatings] = useState([]);
  const [average, setAverage] = useState(0);
  const [myRating, setMyRating] = useState(0);
  const [myComment, setMyComment] = useState("");
  const [submitting, setSubmitting] = useState(false);

  // ‚ö†Ô∏è Modal b√°o l·ªói
  const [errorModal, setErrorModal] = useState({
    visible: false,
    title: "",
    content: "",
  });

  if (!bookDetail) {
    return <p className="p-8 text-red-500">Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu s√°ch.</p>;
  }

  // ‚úÖ G·ª£i √Ω s√°ch t∆∞∆°ng t·ª±
  useEffect(() => {
    const fetchSimilarBooks = async () => {
      if (!bookDetail["Description"]) return;
      setLoading(true);
      try {
        const result = await searchBooks(bookDetail["Description"], 6);
        setSuggestedBooks(result);
      } catch (error) {
        console.error("L·ªói khi t√¨m ki·∫øm s√°ch t∆∞∆°ng t·ª±:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchSimilarBooks();
  }, [bookDetail]);

  // ‚úÖ L·∫•y danh s√°ch ƒë√°nh gi√° v√† ƒëi·ªÉm trung b√¨nh
  useEffect(() => {
    const fetchRatings = async () => {
      try {
        const [res1, res2] = await Promise.all([
          getRatingsForBook(bookDetail.ISBN),
          getAverageRating(bookDetail.ISBN),
        ]);
        setRatings(res1);
        setAverage(res2.average_rating);
      } catch (err) {
        console.error("L·ªói khi l·∫•y ƒë√°nh gi√°:", err);
        setErrorModal({
          visible: true,
          title: "Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°",
          content: "Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.",
        });
      }
    };
    fetchRatings();
  }, [bookDetail.ISBN]);

  // ‚úÖ G·ª≠i ƒë√°nh gi√° m·ªõi (d√πng fetch)
  const handleSubmitRating = async () => {
    if (!myRating) return message.warning("Vui l√≤ng ch·ªçn s·ªë sao!");
    const token = localStorage.getItem("access_token");
    if (!token) {
      setErrorModal({
        visible: true,
        title: "Y√™u c·∫ßu ƒëƒÉng nh·∫≠p",
        content: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ g·ª≠i ƒë√°nh gi√°.",
      });
      navigate("/login");
      return;
    }

    setSubmitting(true);
    try {
      const payload = {
        ISBN: bookDetail.ISBN,
        rating: myRating,
        text: myComment,
      };

      const response = await submitRating(token, payload);
      console.log("‚úÖ ƒê√°nh gi√° ƒë√£ g·ª≠i:", response);
      message.success("ƒê√£ g·ª≠i ƒë√°nh gi√°!");

      // L√†m m·ªõi l·∫°i danh s√°ch
      const [newRatings, newAvg] = await Promise.all([
        getRatingsForBook(bookDetail.ISBN),
        getAverageRating(bookDetail.ISBN),
      ]);
      setRatings(newRatings);
      setAverage(newAvg.average_rating);

      // Reset input
      setMyRating(0);
      setMyComment("");
    } catch (err) {
      console.error("‚ùå L·ªói g·ª≠i rating:", err);
      let msg = "Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i.";

      if (err.message.includes("401")) {
        msg = "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
        localStorage.removeItem("access_token");
        navigate("/login");
      } else if (err.message.includes("NetworkError")) {
        msg = "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Ki·ªÉm tra m·∫°ng c·ªßa b·∫°n.";
      }

      // üß† Hi·ªÉn th·ªã modal l·ªói
      setErrorModal({
        visible: true,
        title: "L·ªói khi g·ª≠i ƒë√°nh gi√°",
        content: msg,
      });
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="bg-white min-h-screen p-8">
      {/* =================== PH·∫¶N TH√îNG TIN S√ÅCH =================== */}
      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* H√¨nh ·∫£nh */}
        <div className="flex justify-center">
          <img
            src={bookDetail["Image-URL-L"]}
            alt={bookDetail["Book-Title"]}
            className="rounded-xl shadow-md object-cover h-[450px]"
          />
        </div>

        {/* Th√¥ng tin */}
        <div className="flex flex-col justify-between space-y-6">
          <div>
            <h1 className="text-3xl font-bold text-black mb-4">
              {bookDetail["Book-Title"]}
            </h1>
            <p className="text-gray-700 text-lg mb-2">
              <span className="font-medium">T√°c gi·∫£:</span>{" "}
              {bookDetail["Book-Author"]}
            </p>
            <p className="text-gray-700 mb-1">
              <span className="font-medium">NƒÉm XB:</span>{" "}
              {bookDetail["Year-Of-Publication"]}
            </p>
            <p className="text-gray-700 mb-1">
              <span className="font-medium">NXB:</span>{" "}
              {bookDetail["Publisher"]}
            </p>
            <p className="text-gray-500 text-sm">
              <span className="font-medium">ISBN:</span> {bookDetail.ISBN}
            </p>
            <p className="text-gray-700 mb-1">
              <span className="font-medium">M√¥ t·∫£:</span>{" "}
              {bookDetail["Description"] || "Kh√¥ng c√≥ m√¥ t·∫£"}
            </p>
          </div>

          {/* ‚≠ê ƒêi·ªÉm trung b√¨nh */}
          <div>
            <p className="text-lg font-semibold text-yellow-600">
              ‚≠ê ƒêi·ªÉm trung b√¨nh: {average?.toFixed(1) || 0}/10
            </p>
            <p className="text-gray-500 text-sm">
              ({ratings.length} l∆∞·ª£t ƒë√°nh gi√°)
            </p>
          </div>

          <Button
            type="primary"
            size="large"
            className="bg-black text-white px-8 py-5 rounded-lg hover:bg-gray-800 transition"
          >
            ƒê·ªçc ngay
          </Button>
        </div>
      </div>

      {/* =================== PH·∫¶N ƒê√ÅNH GI√Å =================== */}
      <div className="max-w-6xl mx-auto mt-12">
        <Divider orientation="left" className="text-lg font-semibold text-black">
          ƒê√°nh gi√° c·ªßa b·∫°n
        </Divider>

        {/* Input rating */}
        <div className="flex flex-col gap-4 mb-8">
          <Rate
            count={10}
            value={myRating}
            onChange={setMyRating}
            className="text-yellow-500 text-2xl"
          />
          <TextArea
            rows={3}
            value={myComment}
            onChange={(e) => setMyComment(e.target.value)}
            placeholder="Vi·∫øt c·∫£m nh·∫≠n c·ªßa b·∫°n..."
          />
          <Button
            type="primary"
            loading={submitting}
            onClick={handleSubmitRating}
          >
            G·ª≠i ƒë√°nh gi√°
          </Button>
        </div>

        {/* Danh s√°ch c√°c ƒë√°nh gi√° */}
        <Divider orientation="left" className="text-lg font-semibold text-black">
          T·∫•t c·∫£ ƒë√°nh gi√°
        </Divider>

        {ratings.length === 0 ? (
          <p className="text-gray-500 italic">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>
        ) : (
          <List
            itemLayout="vertical"
            dataSource={ratings}
            renderItem={(item) => (
              <List.Item>
                <div className="flex justify-between items-center mb-1">
                  <span className="font-medium text-black">
                    {item.FullName || item.Username || "Ng∆∞·ªùi d√πng ·∫©n danh"}
                  </span>
                  <span className="text-yellow-500 font-semibold">
                    {item["Book-Rating"]}/10
                  </span>
                </div>
                <p className="text-gray-700">
                  {item.Text || "Kh√¥ng c√≥ b√¨nh lu·∫≠n"}
                </p>
                <Divider />
              </List.Item>
            )}
          />
        )}
      </div>

      {/* =================== G·ª¢I √ù S√ÅCH =================== */}
      <div className="max-w-6xl mx-auto mt-12">
        <Divider orientation="left" className="text-lg font-semibold text-black">
          G·ª£i √Ω th√™m
        </Divider>

        {loading ? (
          <div className="flex justify-center items-center py-10">
            <Spin size="large" tip="ƒêang t√¨m s√°ch t∆∞∆°ng t·ª±..." />
          </div>
        ) : suggestedBooks.length === 0 ? (
          <p className="text-gray-500 italic">Kh√¥ng t√¨m th·∫•y s√°ch t∆∞∆°ng t·ª±.</p>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
            {suggestedBooks.map((book) => (
              <BookCard key={book.ISBN || book._id} book={book} />
            ))}
          </div>
        )}
      </div>

      {/* ‚ö†Ô∏è Modal th√¥ng b√°o l·ªói */}
      <Modal
        open={errorModal.visible}
        title={errorModal.title}
        onCancel={() => setErrorModal({ ...errorModal, visible: false })}
        onOk={() => setErrorModal({ ...errorModal, visible: false })}
        okText="ƒê√≥ng"
        cancelButtonProps={{ style: { display: "none" } }}
      >
        <p>{errorModal.content}</p>
      </Modal>
    </div>
  );
};

export default BookDetails;
